// Generated by CoffeeScript 1.6.3
(function() {
  var Editor, Range, getCssRule;

  Range = ace.require('ace/range').Range;

  getCssRule = (function() {
    var cache;
    cache = {};
    return function(selector) {
      var sheets;
      sheets = [].slice.call(document.styleSheets);
      sheets.forEach(function(sheet) {
        var rules, _ref;
        rules = [].slice.call((_ref = sheet.cssRules) != null ? _ref : sheet.rules);
        return rules.forEach(function(rule) {
          if (rule.selectorText && rule.selectorText.indexOf(selector) !== -1) {
            return cache[selector] = rule;
          }
        });
      });
      return cache[selector];
    };
  })();

  window.Editor = Editor = (function() {
    function Editor(id) {
      var _this = this;
      this.editor = ace.edit(id);
      this.editor.setTheme('ace/theme/github');
      this.editor.setPrintMarginColumn(-1);
      this.editor.getSession().setTabSize(2);
      this.editor.setSelectionStyle('text');
      this.setLangType('coffee');
      this.editor.commands.addCommand({
        bindKey: {
          mac: 'Command+Enter',
          win: 'Alt+Enter'
        },
        name: 'run',
        exec: function() {
          var _base;
          return typeof (_base = _this._callback)['run'] === "function" ? _base['run']() : void 0;
        }
      });
      this.editor.commands.addCommand({
        bindKey: {
          mac: 'Command+.',
          win: 'Alt+.'
        },
        name: 'reset',
        exec: function() {
          var _base;
          return typeof (_base = _this._callback)['reset'] === "function" ? _base['reset']() : void 0;
        }
      });
      this._callback = {};
    }

    Editor.prototype.on = function(event, callback) {
      return this._callback[event] = callback;
    };

    Editor.prototype.getValue = function() {
      return this.editor.getValue().trim();
    };

    Editor.prototype.clear = function() {
      return this.editor.setValue('');
    };

    Editor.prototype.setSourceCode = function(code, lang) {
      if (lang == null) {
        lang = 'coffee';
      }
      this.editor.setValue(code);
      this.editor.clearSelection();
      this.editor.moveCursorTo(0, 0);
      this.editor.moveCursorToPosition(0);
      return this.setLangType(lang);
    };

    Editor.prototype.setLangType = function(lang) {
      return this.editor.getSession().setMode("ace/mode/" + lang);
    };

    Editor.prototype.getSmartRegion = function() {
      var range, session,
        _this = this;
      session = this.editor.session;
      range = this.editor.getSelectionRange();
      if (range.isEmpty()) {
        this.editor.getSelection().setSelectionRange(new Range(range.start.row, 0, range.start.row, Infinity));
      }
      this.blink('.ace_marker-layer .ace_selection', function() {
        return _this.editor.getSelection().setSelectionRange(range);
      });
      return session.getTextRange(this.editor.getSelectionRange());
    };

    Editor.prototype.blink = function(selector, callback) {
      var rule;
      rule = getCssRule(selector);
      if (rule) {
        setTimeout(function() {
          rule.style.setProperty('-webkit-animation', null);
          return callback();
        }, 250);
        return rule.style.setProperty('-webkit-animation', 'blink 0.5s');
      }
    };

    return Editor;

  })();

}).call(this);
